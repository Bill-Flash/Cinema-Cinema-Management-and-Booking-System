title 01 - Shedule Movie Screening BCE
actor "Staff" as a
boundary "MovieScreeningDialog" as sd
boundary "StaffUI" as ui
control ":CinemaSystem" as cs
participant ": Cinema" as c
participant "MovieMapper" as mm
participant "ScreenMapper" as sm
participant "ScreeningAllMapper" as ms

database db


entity s(Screen)
entity m(Movie)

entity "MovieScreening" as MS

a->ui:addMovieScreening()
activate ui
ui->*sd:MovieScreeningDialog()
activate sd
sd-->ui:
deactivate sd
ui->sd:showAndWait()
activate sd
sd->a:
a-->sd:
sd-->ui:return ms: MovieScreenigInfo
deactivate sd
ui->cs: addMovieScreening(date: LocalDate, \nbeginTime: LocalTime: screenId: int,\nmovieId: int)
activate cs
expandable- See diagram 01 - Shedule Movie Screening ACE(a/b)
cs->cs:checkScreeningGap()                                                 
end
expandable- See diagram 01 - Shedule Movie Screening ECE
cs->cs:checkScreeningTime()                                               
end
cs->c: addMovieScreening(date: LocalDate, \nbeginTime: LocalTime, screenId: int,\nmovieId: int)
activate c
c->mm:getMovieById(movieId: int)
activate mm
mm->mm:getFromCacheByNumber(movieId: int)
mm-->c:return m: Movie
deactivate mm

c->sm:getScreenById(screenId: int)
activate sm
sm->sm:getFromCacheByNumber(screenId: int)
sm-->c:return s: Screen
deactivate sm

c->s(Screen):c := getScreenCapcity


c->ms:addMovieScreening(date: LocalDate, beginTime: LocalTime, s: Screen, m: Movie, sold_tickets: Ticket [c])
activate ms
ms->db:oid:=getId()
ms->ms:performUpdate(sql: String)
activate ms
ms->db:executeUpdate(sql: String)
ms-->ms:
deactivate ms
ms->*MS:PersistentMovieScreening(oid: int, date: LocalDate,\n beginTime: LocalTime, s: Screen, m: Movie, sold_tickets: Ticket [c])
activate MS
MS-->ms:
deactivate MS
ms-->c:
deactivate ms

c-->cs:
deactivate c

cs->cs:notifyObservers()
activate cs
cs->ui: update()
activate ui
ui->cs:date:=getDate()
ui->cs:screenings:=getScreenings()
ui-->cs:
deactivate ui
cs-->cs:
deactivate cs
cs-->ui:
deactivate cs

ui-->a:
deactivate ui
